{"version":3,"sources":["client.js","components/Map/index.jsx","serviceWorker.js","index.js","App.js"],"names":["BASE_SQL_QUERY_URL","DATE_FORMAT","TILE_LAYER_URL","TILE_LAYER_ATTRIBUTION","UPDATE_INTERVAL","getIncidentMarker","incident","latLng","leaflet","marker","icon","divIcon","className","getIncidentsLayer","incidents","geoJSON","pointToLayer","bindPopup","layer","JSON","stringify","getIncidentPopupText","feature","properties","Index","useEffect","incidentsLayer","map","setView","tileLayer","maxZoom","addTo","getLeafletMap","endDate","moment","format","startDate","subtract","displayIncidents","sqlQuery","fetch","then","res","json","geojson","parse","result","records","Point","getIncidents","clearLayers","intervalId","setInterval","clearInterval","id","style","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAEMA,EAAkB,qGCKxB,IAAMC,EAAc,mBAChBC,EAAiB,2EACjBC,EAAyB,oJACzBC,EAAkB,IAMtB,SAASC,EAAkBC,EAAUC,GACjC,OAAOC,IAAQC,OAAOF,EAAQ,CAACG,KAAMF,IAAQG,QAAQ,CAACC,UAAW,sBASrE,SAASC,EAAT,GAA2C,IAAdC,EAAa,EAAbA,UACzB,OAAON,IAAQO,QAAQD,EAAW,CAAEE,aAAcX,IAC7CY,WAAU,SAACC,GAAD,OAhBnB,YAA6C,IAAbZ,EAAY,EAAZA,SAC5B,OAAOa,KAAKC,UAAUd,GAeIe,CAAqB,CAAEf,SAAUY,EAAMI,QAAQC,gBAG9D,SAASC,IAsBtB,OArBEC,qBAAU,WACN,IAGIC,EAHEC,EAbd,WACI,IAAMA,EAAMnB,IAAQmB,IAAI,OAAOC,QAAQ,CAAC,MAAO,SAAU,IAEzD,OADApB,IAAQqB,UAAU3B,EAAgB,CAACC,yBAAwB2B,QAAS,KAAKC,MAAMJ,GACxEA,EAUSK,GACRC,EAAUC,MAASC,OAAOlC,GAC1BmC,EAAYF,MAASG,SAAS,GAAI,SAASF,OAAOlC,GAGhDqC,EAAmB,YD7B1B,YAA+C,IAAvBF,EAAsB,EAAtBA,UAAWH,EAAW,EAAXA,QAChCM,EAAQ,kGAA6FH,EAA7F,kBAAgHH,EAAhH,KAEd,OAAOO,MAAMxC,EAAqBuC,GAC7BE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIC,IAAQC,MAAMF,EAAKG,OAAOC,QAAS,CAACC,MAAO,CAAC,MAAO,cCyB7DC,CAAa,CAAEb,YAAWH,YAAWQ,MAAK,SAAA3B,GAClCY,GACAA,EAAewB,cAEnBxB,EAAiBb,EAAkB,CAAEC,cAAaiB,MAAMJ,OAIhEW,IACA,IAAMa,EAAaC,YAAYd,EAAkBlC,GAEjD,OAAO,kBAAMiD,cAAcF,OAG1B,yBAAKG,GAAG,MAAMC,MAAO,CAACC,MAAO,QAASC,OAAQ,WCzCnCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCFD,WACb,OAAO,kBAAE,EAAF,QDCO,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.e62e3be2.chunk.js","sourcesContent":["import geojson from \"geojson\";\n\nconst BASE_SQL_QUERY_URL = `https://cors-anywhere.herokuapp.com/https://data.boston.gov/api/3/action/datastore_search_sql?sql=`;\n\n/**\n * Returns a collection of geoJSON objects representing incidents\n * @param startDate - moment date\n * @param endDate - moment date\n */\nexport function getIncidents({ startDate, endDate }) {\n    const sqlQuery = `SELECT * from \"12cb3883-56f5-47de-afa5-3b1cf61b257b\" WHERE \"OCCURRED_ON_DATE\" BETWEEN '${startDate}' and '${endDate}'`;\n\n    return fetch(BASE_SQL_QUERY_URL + sqlQuery)\n        .then(res => res.json())\n        .then(json => geojson.parse(json.result.records, {Point: ['Lat', 'Long']}));\n}\n","import React, { useEffect } from 'react';\nimport './styles.scss';\nimport moment from \"moment\";\nimport leaflet from \"leaflet\";\n\nimport { getIncidents } from \"../../client\";\n\nconst DATE_FORMAT = 'YYYY-MM-DD hh:mm',\n    TILE_LAYER_URL = 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\n    TILE_LAYER_ATTRIBUTION = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    UPDATE_INTERVAL = 60000;\n\nfunction getIncidentPopupText({ incident }) {\n    return JSON.stringify(incident);\n}\n\nfunction getIncidentMarker(incident, latLng) {\n    return leaflet.marker(latLng, {icon: leaflet.divIcon({className: 'incident-marker'}) });\n}\n\nfunction getLeafletMap() {\n    const map = leaflet.map('map').setView([42.3, -71.0589], 13);\n    leaflet.tileLayer(TILE_LAYER_URL, {TILE_LAYER_ATTRIBUTION, maxZoom: 19}).addTo(map);\n    return map;\n}\n\nfunction getIncidentsLayer({ incidents }) {\n    return leaflet.geoJSON(incidents, { pointToLayer: getIncidentMarker })\n        .bindPopup((layer) => getIncidentPopupText({ incident: layer.feature.properties }));\n}\n\nexport default function Index() {\n    useEffect(() => {\n        const map = getLeafletMap(),\n            endDate = moment().format(DATE_FORMAT),\n            startDate = moment().subtract(24, 'hours').format(DATE_FORMAT);\n        let incidentsLayer;\n\n        const displayIncidents = () => {\n            getIncidents({ startDate, endDate }).then(incidents => {\n                if (incidentsLayer) {\n                    incidentsLayer.clearLayers();\n                }\n                incidentsLayer = getIncidentsLayer({ incidents }).addTo(map);\n            });\n        };\n\n        displayIncidents();\n        const intervalId = setInterval(displayIncidents, UPDATE_INTERVAL);\n\n        return () => clearInterval(intervalId);\n    });\n\n  return <div id=\"map\" style={{width: \"100vw\", height: \"100vh\" }} />;\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\nimport Map from \"./components/Map\";\n\nexport default function App() {\n  return < Map />;\n}"],"sourceRoot":""}